% Usage: get traj, vectPlusi, and vectMinusi from the trajectory_vector
% program. tracksFinal from the data folder. 
% trajectory_vector can select a ROI, or the ROI can be selected previously
% on img_sequence.
% 1st run Iniciacion, then Load data for every movie
% It collects the data from pre and post FSK
%% Load ratios and trajectories (iniciacion) 
% Run only for the first movie
% traj: all (linear) trajectories in the ROI, depends on the checkbox in trajectory_vector
% tracksFinal: all trajectories in the ROI
% vectPlusi: all the plus-end going vectors in the ROI
% Ratio of linear trajectories over all trajectories in the cell
AsymRatio.Lall = length(traj)/length(tracksFinal);
% Ratio of plus-end over all trajectories in the movie
AsymRatio.Pall = length(vectPlusi)/length(tracksFinal);
% Ratio of plus-end over all linear trajectories in the cell
AsymRatio.Plin = length(vectPlusi)/length(traj);
AsymRatio.Mall = length(vectMinusi)/length(tracksFinal);
AsymRatio.Mlin = length(vectMinusi)/length(traj);
trajPlus = traj(vectPlusi);
trajMinus = traj(vectMinusi);

%% Continue Loading data
% Run for the subsequent movies
% Proportion of asymetric over total trajectories in the cell
AsymRatio.Lall = [AsymRatio.Lall, length(traj)/length(tracksFinal)];
% Proportion of plus-end asymetric over total trajectories in the cell
AsymRatio.Pall = [AsymRatio.Pall, length(vectPlusi)/length(tracksFinal)];
AsymRatio.Plin = [AsymRatio.Plin, length(vectPlusi)/length(traj)];
AsymRatio.Mall = [AsymRatio.Mall, length(vectMinusi)/length(tracksFinal)];
AsymRatio.Mlin = [AsymRatio.Mlin, length(vectMinusi)/length(traj)];
trajPlus = [trajPlus , traj(vectPlusi)];
trajMinus = [trajMinus, traj(vectMinusi)];
clear traj vectMinusi vectPlusi 

%% Analysis=========================================================================================
%% Contourlength
% Plus end 
CELL = 'Control';
T1 = trajMinusPre;
T2 = trajMinusPost;
trajlabel = 'Plus-end';
% Plus end CL
Nt = length(T1);   
T1CL = zeros(Nt,1);
for i=1:Nt
    aux = 0;
    for j=1:(length(T1{i}(:,1))-1)   %Number of trajectory points
        aux = norm(T1{i}(j+1,:)-T1{i}(j,:));
        T1CL(i) = T1CL(i) + aux;
    end
end
% Minus end CL
Nt = length(T2);   
T2CL = zeros(Nt,1);
k = 1;
for i=1:Nt
    aux = 0;
    for j=1:(length(T2{i}(:,1))-1)   %Number of trajectory points
        aux = norm(T2{i}(j+1,:)-T2{i}(j,:));
        T2CL(i) = T2CL(i) + aux;
    end
end
% CL histograms
figure   
x = 1:5:round(max([T1CL;T2CL])) + 5;
subplot(2,1,1)
hist(T1CL,x)
title([trajlabel,', pre-FSK contourlength histogram; Mean: ', num2str(mean(T1CL),2)])
subplot(2,1,2)
hist(T2CL,x)
title([trajlabel,', postFSK contourlength histogram; Mean: ', num2str(mean(T2CL),2)])
% t-test
alpha = 0.05;
figure; 
barerror([1;2],[mean(T1CL);mean(T2CL)],[std(T1CL)/sqrt(length(T1CL));std(T2CL)/sqrt(length(T2CL))]...
    ,1,'b','k',{['pre-FSK mean = ',num2str(mean(T1CL),3)],['post-FSK mean = ',num2str(mean(T2CL),3)]});
% Test
if ttest2(T2CL, T1CL, alpha, 'right')
    leyenda = ['Post-FSK > Pre-FSK (p<',num2str(alpha),')'];
elseif ttest2(T2CL, T1CL, alpha, 'left')
    leyenda = ['Post-FSK < Pre-FSK (p<',num2str(alpha),')'];
else
    leyenda = ['Post-FSK = Pre-FSK (p<',num2str(alpha),')'];
end
title([trajlabel,' trajectories - ', leyenda]); box on

%% Asymmetric ratio
alpha = 0.2;
P1 = AsymRatioPre.Pall;
P2 = AsymRatioPost.Pall;
figure; 
barerror([1;2],[mean(P1);mean(P2)],...
    [std(P1)/sqrt(length(P1));std(P2)/sqrt(length(P2))]...
    ,1,'b','k',{['pre-FSK mean = ',num2str(mean(P1),3)],...
    ['post-FSK mean = ',num2str(mean(P2),3)]});
% Test
if ttest2(P2, P1, alpha, 'right')
    leyenda = ['Mean of Post-FSK > Pre-FSK (p<',num2str(alpha),')'];
elseif ttest2(P2, P1, alpha, 'left')
    leyenda = ['Mean of Post-FSK < Pre-FSK (p<',num2str(alpha),')'];
else
    leyenda = ['Mean of Post-FSK = Pre-FSK (p<',num2str(alpha),')'];
end
title({'Ratio of plus-end linear, over all trajectories in the cell', leyenda}); box on
% plotCaption = sprintf(['Ratio of asymmetric over all trajectories in the cell\n', leyenda]);
% title(plotCaption)

%% Speed  
dt = 1;  % time between 2 points
alpha = 0.05;
MinusPre.Vel = vel(trajMinusPre, dt);
MinusPost.Vel = vel(trajMinusPost, dt);
PlusPre.Vel = vel(trajPlusPre, dt);
PlusPost.Vel = vel(trajPlusPost, dt);
% Concatenate velocity data for histograms
MinusPre.Pool = cat(1,MinusPre.Vel{:});
MinusPost.Pool = cat(1,MinusPost.Vel{:});
PlusPre.Pool = cat(1,PlusPre.Vel{:});
PlusPost.Pool = cat(1,PlusPost.Vel{:});
MinusPre.M = mean(MinusPre.Pool);
MinusPost.M = mean(MinusPost.Pool);
PlusPre.M = mean(PlusPre.Pool);
PlusPost.M = mean(PlusPost.Pool);
MinusPre.Std = std(MinusPre.Pool);
MinusPost.Std = std(MinusPost.Pool);
PlusPre.Std = std(PlusPre.Pool);
PlusPost.Std = std(PlusPost.Pool);
% Plot histograms
figure; nbins = 200;
subplot(2,2,1); hist(MinusPre.Pool, nbins)
    xlabel(['Mean: ',num2str(MinusPre.M,3)])
    Title('Minus-end trajectories, Pre-FSK')
subplot(2,2,2); hist(MinusPost.Pool, nbins)
    xlabel(['Mean: ',num2str(MinusPost.M,3)])
    Title('Minus-end trajectories, Post-FSK')
subplot(2,2,3); hist(PlusPre.Pool, nbins)
    xlabel(['Mean: ',num2str(MinusPost.M,3)])
    Title('Plus-end trajectories, Pre-FSK')
subplot(2,2,4); hist(PlusPost.Pool, nbins)
    xlabel(['Mean: ',num2str(PlusPost.M,3)])
    Title('Plus-end trajectories, Post-FSK')
[~,h1]=suplabel('Velocity distribution','t');
set(h1,'FontSize',12)
% Bar plots
figure;
subplot(2,1,1); title('Minus-end mean velocity')
    barerror([1;2],[MinusPre.M;MinusPost.M],...
    [MinusPre.Std/sqrt(length(MinusPre.Pool));MinusPost.Std/sqrt(length(MinusPost.Pool))]...
    ,1,'b','k',{['pre-FSK mean = ',num2str(MinusPre.M,3)],...
    ['post-FSK mean = ',num2str(MinusPost.M,3)]});
    % Test
    if ttest2(MinusPost.Pool, MinusPre.Pool, alpha, 'right')
        leyenda = ['Post-FSK > Pre-FSK (p<',num2str(alpha),')'];
    elseif ttest2(MinusPost.Pool, MinusPre.Pool, alpha, 'left')
        leyenda = ['Post-FSK < Pre-FSK (p<',num2str(alpha),')'];
    else
        leyenda = ['Post-FSK = Pre-FSK (p<',num2str(alpha),')'];
    end
    title(['Minus-end mean velocity - ', leyenda]); box on;
subplot(2,1,2); title('Plus-end mean velocity')
    barerror([1;2],[PlusPre.M;PlusPost.M],...
    [PlusPre.Std/sqrt(length(PlusPre.Pool));PlusPost.Std/sqrt(length(PlusPost.Pool))]...
    ,1,'b','k',{['pre-FSK mean = ',num2str(PlusPre.M,3)],...
    ['post-FSK mean = ',num2str(PlusPost.M,3)]});
    % Test
    if ttest2(PlusPost.Pool, PlusPre.Pool, alpha, 'right')
        leyenda = ['Post-FSK > Pre-FSK (p<',num2str(alpha),')'];
    elseif ttest2(PlusPost.Pool, PlusPre.Pool, alpha, 'left')
        leyenda = ['Post-FSK < Pre-FSK (p<',num2str(alpha),')'];
    else
        leyenda = ['Post-FSK = Pre-FSK (p<',num2str(alpha),')'];
    end
    title(['Plus-end mean velocity - ', leyenda]); box on;
[~,h1]=suplabel('Mean Velocity','t');
set(h1,'FontSize',12)

%% Dwelling times
alpha = 0.1;
for i=1:length(trajMinusPre)
    MinusPre.T(i) = length(trajMinusPre{i});
end
for i=1:length(trajMinusPost)
    MinusPost.T(i) = length(trajMinusPost{i});
end
for i=1:length(trajPlusPre)
    PlusPre.T(i) = length(trajPlusPre{i});
end
for i=1:length(trajPlusPost)
    PlusPost.T(i) = length(trajPlusPost{i});
end
MinusPre.TM = mean(MinusPre.T);
MinusPost.TM = mean(MinusPost.T);
PlusPre.TM = mean(PlusPre.T);
PlusPost.TM = mean(PlusPost.T);
% Bar plots
figure;
subplot(2,1,1); 
    barerror([1;2],[MinusPre.TM;MinusPost.TM],...
    [std(MinusPre.T)/sqrt(length(MinusPre.T));std(MinusPost.T)/sqrt(length(MinusPost.T))]...
    ,1,'b','k',{['pre-FSK mean = ',num2str(MinusPre.TM,3)],...
    ['post-FSK mean = ',num2str(MinusPost.TM,3)]});
    % Test
    if ttest2(MinusPost.T, MinusPre.T, alpha, 'right')
        leyenda = ['Post-FSK > Pre-FSK (p<',num2str(alpha),')'];
    elseif ttest2(MinusPost.T, MinusPre.T, .3, 'left')
        leyenda = ['Post-FSK < Pre-FSK (p<',num2str(.3),')'];
    else
        leyenda = ['Post-FSK = Pre-FSK (p<',num2str(alpha),')'];
    end
    title(['Minus-end mean dwelling time - ', leyenda]); box on
subplot(2,1,2); 
    barerror([1;2],[PlusPre.TM;PlusPost.TM],...
    [std(PlusPre.T)/sqrt(length(PlusPre.T));std(PlusPost.T)/sqrt(length(PlusPost.T))]...
    ,1,'b','k',{['pre-FSK mean = ',num2str(PlusPre.TM,3)],...
    ['post-FSK mean = ',num2str(PlusPost.TM,3)]});
    % Test
    if ttest2(PlusPost.T, PlusPre.T, alpha, 'right')
        leyenda = ['Post-FSK > Pre-FSK (p<',num2str(alpha),')'];
    elseif ttest2(PlusPost.T, PlusPre.T, alpha, 'left')
        leyenda = ['Post-FSK < Pre-FSK (p<',num2str(alpha),')'];
    else
        leyenda = ['Post-FSK = Pre-FSK (p<',num2str(alpha),')'];
    end
    title(['Plus-end mean dwelling time - ', leyenda]); box on
[~,h1]=suplabel('Mean trajectory time','t');
set(h1,'FontSize',12)
